import chalk from 'chalk';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs-extra';
import ejs from 'ejs';
import { execa } from 'execa';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const TEMPLATES_DIR = path.join(__dirname, 'templates');

async function generateConfigFiles(projectPath, options) {
  try {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è tsconfig.json –¥–ª—è TypeScript
    if (options.typescript) {
      const tsConfig = await fs.readFile(
        path.join(TEMPLATES_DIR, 'shared/tsconfig.json.ejs'),
        'utf-8'
      );
      await fs.writeFile(
        path.join(projectPath, 'tsconfig.json'),
        ejs.render(tsConfig, options)
      );
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ESLint/Prettier –∫–æ–Ω—Ñ–∏–≥–æ–≤
    if (options.eslintPrettier) {
      const eslintConfig = await fs.readFile(
        path.join(TEMPLATES_DIR, 'shared/eslintrc.cjs.ejs'),
        'utf-8'
      );
      await fs.writeFile(
        path.join(projectPath, '.eslintrc.cjs'),
        ejs.render(eslintConfig, options)
      );

      const prettierConfig = await fs.readFile(
        path.join(TEMPLATES_DIR, 'shared/prettierrc.json.ejs'),
        'utf-8'
      );
      await fs.writeFile(
        path.join(projectPath, '.prettierrc.json'),
        prettierConfig
      );
    }
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤: ${error.message}`);
  }
}
async function setupGitHooks(projectPath, options) {
  if (!options.gitInit) return;

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Husky
    await execa('npx', ['husky', 'install'], {
      cwd: projectPath,
      stdio: 'inherit'
    });

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤
    await fs.copy(
      path.join(TEMPLATES_DIR, 'shared/husky'),
      path.join(projectPath, '.husky')
    );

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ lint-staged
    if (options.eslintPrettier) {
      const lintStagedConfig = await fs.readFile(
        path.join(TEMPLATES_DIR, 'shared/lint-staged.config.js.ejs'),
        'utf-8'
      );
      await fs.writeFile(
        path.join(projectPath, 'lint-staged.config.js'),
        lintStagedConfig
      );
    }
  } catch (error) {
    console.log(chalk.yellow('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git hooks:'), error.message);
  }
}
async function installDependencies(projectPath) {
  try {
    console.log(chalk.blue('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...'));
    await execa('npm', ['install'], {
      cwd: projectPath,
      stdio: 'inherit'
    });
  } catch (error) {
    console.log(chalk.yellow('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:'), error.message);
  }
}

async function runPostActions(projectPath, options) {
  try {
    // –ó–∞–ø—É—Å–∫ ESLint --fix
    if (options.eslintPrettier) {
      console.log(chalk.blue('\nüîß –ó–∞–ø—É—Å–∫ eslint --fix...'));
      await execa('npx', ['eslint', '--fix', '.'], {
        cwd: projectPath,
        stdio: 'inherit'
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git
    if (options.gitInit) {
      console.log(chalk.blue('\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git...'));
      await execa('git', ['init'], {
        cwd: projectPath,
        stdio: 'inherit'
      });
    }
  } catch (error) {
    console.log(chalk.yellow('‚ö†Ô∏è Post-actions –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏:'));
    console.log(chalk.yellow(error.message));
  }
}
async function setupJest(projectPath, options) {
  if (!options.jest) return;

  const jestConfig = await fs.readFile(
    path.join(TEMPLATES_DIR, 'shared/jest/jest.config.js.ejs'),
    'utf-8'
  );
  
  await fs.writeFile(
    path.join(projectPath, 'jest.config.js'),
    ejs.render(jestConfig, {
      ...options,
      testEnvironment: options.framework === 'express' ? 'node' : 'jsdom'
    })
  );

  // –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞
  const testExample = options.framework === 'express' ? 'node-test.js.ejs' : 'react-test.js.ejs';
  await fs.copy(
    path.join(TEMPLATES_DIR, 'shared/jest', testExample),
    path.join(projectPath, 'src', `example.${options.typescript ? 'ts' : 'js'}`)
  );
}
export default async function createProject(projectName, cliOptions = {}) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if (!projectName || !/^[a-z0-9-]+$/i.test(projectName)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã');
    }

    const projectPath = path.resolve(process.cwd(), projectName);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (await fs.pathExists(projectPath)) {
      throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${projectName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ü–∏–π
    const options = {
      projectName,
      framework: cliOptions.framework || 'react',
      typescript: cliOptions.typescript || false,
      eslintPrettier: cliOptions.eslintPrettier || false,
      jest: cliOptions.jest || false,
      gitInit: cliOptions.gitInit !== false
    };

    console.log(chalk.cyan('\nüõ†  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:'));
    console.log('‚îÄ'.repeat(50));
    console.log('–¢–∏–ø:', chalk.bold(options.framework));
    console.log('TypeScript:', chalk.bold(options.typescript ? '–î–∞' : '–ù–µ—Ç'));
    console.log('ESLint/Prettier:', chalk.bold(options.eslintPrettier ? '–î–∞' : '–ù–µ—Ç'));
    console.log('‚îÄ'.repeat(50));

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    await fs.ensureDir(projectPath);

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    await fs.copy(
      path.join(TEMPLATES_DIR, options.framework),
      projectPath
    );

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await generateConfigFiles(projectPath, options);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    await installDependencies(projectPath);
await setupGitHooks(projectPath, options);
    // Post-actions
    await runPostActions(projectPath, options);

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log(chalk.green(`\n‚úÖ –ü—Ä–æ–µ–∫—Ç ${chalk.bold(projectName)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`));
    console.log(chalk.blue('\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n'));
    console.log(`cd ${projectName}`);
    console.log(`npm run dev`));

    return { projectPath, options };
  } catch (error) {
    throw new Error(chalk.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`));
  }
}
